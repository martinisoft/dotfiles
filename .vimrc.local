" martinisoft's Custom vim options
" Modifies the Hashrocket dotmatrix vim
" https://github.com/hashrocket/dotmatrix

" Highlight matches.
set hlsearch

" Always show the statusline
set laststatus=2

" Necessary to show Unicode glyphs
set encoding=utf-8

" Powerline
let g:Powerline_symbols = 'fancy'

" But case-sensitive if expression contains a capital letter.
set smartcase

" Show line numbers.
set number
" Show cursor position.
set ruler

" Enable TAB indent and SHIFT-TAB unindent
vnoremap <silent> <TAB> >gv
vnoremap <silent> <S-TAB> <gv

" Set the terminal's title.
set title

" Turn on line wrapping.
set wrap

" Enable 256 colors
set t_Co=256

" Don't make a backup before overwriting a file.
set nobackup
set nowritebackup

set nolist

" Persistent undo files should be elsewhere
set undodir=$TEMP

" Set 2 space soft tabs, expand any hard tabs
set tabstop=2
set shiftwidth=2
set expandtab

" pastetoggle (set paste/nopaste)
set pastetoggle=<F9>

" Railscasts theme
colorscheme railscasts

" Highlight line under the cursor
set cursorline
hi CursorLine   cterm=None ctermbg=darkgrey ctermfg=white guibg=darkgrey guifg=white

" <Leader>c to toggle line highlighting
nnoremap <Leader>c :set cursorline!<CR>

" Change Color when entering Insert Mode
autocmd InsertEnter * highlight CursorLine ctermbg=None ctermfg=Red

" Revert Color to default when leaving Insert Mode
autocmd InsertLeave * highlight CursorLine ctermbg=darkgrey ctermfg=white

" The Silver Searcher!
let g:ackprg = 'ag --nogroup --nocolor --column'

" Highlight extra whitespace like git does, eye-bleeding red blocks
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Trim and Ruby 1.9 Hash Syntax converters courtesy of hashrocket.vim
command! -bar -range=% Trim :<line1>,<line2>s/\s\+$//e
command! -bar -range=% NotRocket :<line1>,<line2>s/:\(\w\+\)\s*=>/\1:/ge

" Setup base projections for Rails.vim
if !exists('g:rails_gem_projections')
  let g:rails_gem_projections = {}
endif

call extend(g:rails_gem_projections, {
      \ "active_model_serializers": {
      \   "app/serializers/*_serializer.rb": {
      \     "command": "serializer",
      \     "template": "class %SSerializer < ActiveModel::Serializer\nend",
      \     "affinity": "model"}},
      \ "rspec-core": {
      \    "spec/support/*.rb": {
      \      "command": "support"}},
      \ "cucumber": {
      \   "features/*.feature": {
      \     "command": "feature",
      \     "template": "Feature: %h"},
      \   "features/support/*.rb": {
      \     "command": "support"},
      \   "features/support/env.rb": {
      \     "command": "support"},
      \   "features/step_definitions/*_steps.rb": {
      \     "command": "steps"}},
      \ "carrierwave": {
      \   "app/uploaders/*_uploader.rb": {
      \     "command": "uploader",
      \     "template": "class %SUploader < CarrierWave::Uploader::Base\nend"}},
      \ "fabrication": {
      \   "spec/fabricators/*_fabricator.rb": {
      \     "command": ["fabricator", "factory"],
      \     "alternate": "app/models/%s.rb",
      \     "related": "db/schema.rb#%p",
      \     "test": "spec/models/%s_spec.rb",
      \     "template": "Fabricator :%s do\nend",
      \     "affinity": "model"}}
      \ }, 'keep')
